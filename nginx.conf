# proxy - react frontend
server {
    root /var/www/osc.link;
    index index.html index.htm;

    server_name osc.link;

    location ~* (\.html|\/sw\.js)$ {
        expires -1y;
        add_header Pragma "no-cache";
        add_header Cache-Control "public";
        add_header X-Frame-Options "DENY";
    }

    location ~* \.(js|css)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header X-Frame-Options "DENY";
    }

    location / {
        add_header X-Frame-Options "DENY";
        try_files $uri /index.html;
    }

    listen [::]:443 ssl ipv6only=on; # managed by Certbot
    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/osc.link/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/osc.link/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
}

# proxy - websocket
server {
    server_name socket.osc.link;

    location / {
        proxy_pass http://127.0.0.1:8080;
        proxy_http_version 1.1;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-NginX-Proxy true;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $http_host;
        proxy_cache_bypass $http_upgrade;

        # increase connection keep alive stuff
        proxy_connect_timeout 7d;
        proxy_send_timeout 7d;
        proxy_read_timeout 7d;
    }

    listen [::]:443 ssl; # managed by Certbot
    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/osc.link/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/osc.link/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
}

# redirect - frontend
server {
    if ($host = osc.link) {
        return 301 https://$host$request_uri;
    } # managed by Certbot

    listen 80;
    listen [::]:80;

    server_name osc.link;
    return 404; # managed by Certbot
}

# redirect - websocket
server {
    if ($host = socket.osc.link) {
        return 301 https://$host$request_uri;
    } # managed by Certbot

    listen 80;
    listen [::]:80;

    server_name socket.osc.link;
    return 404; # managed by Certbot
}